// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#include "example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_example_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_Graph_example_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_example_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_Graph_Node_example_2eproto;
namespace example {
class Data_Graph_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data_Graph_Node> _instance;
} _Data_Graph_Node_default_instance_;
class Data_GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data_Graph> _instance;
} _Data_Graph_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data> _instance;
} _Data_default_instance_;
}  // namespace example
static void InitDefaultsscc_info_Data_example_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_Data_default_instance_;
    new (ptr) ::example::Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_example_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Data_example_2eproto}, {
      &scc_info_Data_Graph_example_2eproto.base,}};

static void InitDefaultsscc_info_Data_Graph_example_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_Data_Graph_default_instance_;
    new (ptr) ::example::Data_Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::Data_Graph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_Graph_example_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Data_Graph_example_2eproto}, {
      &scc_info_Data_Graph_Node_example_2eproto.base,}};

static void InitDefaultsscc_info_Data_Graph_Node_example_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_Data_Graph_Node_default_instance_;
    new (ptr) ::example::Data_Graph_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::Data_Graph_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_Graph_Node_example_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Data_Graph_Node_example_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_example_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_example_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_example_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_example_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph_Node, connectedto_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, right_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, nodes_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, opt_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, learned_switch_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, learned_leftest_node_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, barycenter_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, greedy_insert_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, greedy_switch_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, median_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, sifting_),
  PROTOBUF_FIELD_OFFSET(::example::Data_Graph, split_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::example::Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::Data, graphs_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::example::Data_Graph_Node)},
  { 7, 23, sizeof(::example::Data_Graph)},
  { 34, 40, sizeof(::example::Data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_Data_Graph_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_Data_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_Data_default_instance_),
};

const char descriptor_table_protodef_example_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rexample.proto\022\007example\"\277\002\n\004Data\022#\n\006gra"
  "phs\030\005 \003(\0132\023.example.Data.Graph\032\221\002\n\005Graph"
  "\022\r\n\005right\030\001 \002(\005\022\'\n\005nodes\030\003 \003(\0132\030.example"
  ".Data.Graph.Node\022\013\n\003opt\030\007 \002(\005\022\026\n\016learned"
  "_switch\030\010 \002(\005\022\034\n\024learned_leftest_node\030\t "
  "\002(\005\022\022\n\nbarycenter\030\n \002(\005\022\025\n\rgreedy_insert"
  "\030\013 \002(\005\022\025\n\rgreedy_switch\030\014 \002(\005\022\016\n\006median\030"
  "\r \002(\005\022\017\n\007sifting\030\016 \002(\005\022\r\n\005split\030\017 \002(\005\032\033\n"
  "\004Node\022\023\n\013connectedto\030\002 \003(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_example_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_example_2eproto_sccs[3] = {
  &scc_info_Data_example_2eproto.base,
  &scc_info_Data_Graph_example_2eproto.base,
  &scc_info_Data_Graph_Node_example_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_example_2eproto_once;
static bool descriptor_table_example_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto = {
  &descriptor_table_example_2eproto_initialized, descriptor_table_protodef_example_2eproto, "example.proto", 346,
  &descriptor_table_example_2eproto_once, descriptor_table_example_2eproto_sccs, descriptor_table_example_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_example_2eproto::offsets,
  file_level_metadata_example_2eproto, 3, file_level_enum_descriptors_example_2eproto, file_level_service_descriptors_example_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_example_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_example_2eproto), true);
namespace example {

// ===================================================================

void Data_Graph_Node::InitAsDefaultInstance() {
}
class Data_Graph_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Data_Graph_Node>()._has_bits_);
};

Data_Graph_Node::Data_Graph_Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.Data.Graph.Node)
}
Data_Graph_Node::Data_Graph_Node(const Data_Graph_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      connectedto_(from.connectedto_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:example.Data.Graph.Node)
}

void Data_Graph_Node::SharedCtor() {
}

Data_Graph_Node::~Data_Graph_Node() {
  // @@protoc_insertion_point(destructor:example.Data.Graph.Node)
  SharedDtor();
}

void Data_Graph_Node::SharedDtor() {
}

void Data_Graph_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data_Graph_Node& Data_Graph_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_Graph_Node_example_2eproto.base);
  return *internal_default_instance();
}


void Data_Graph_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:example.Data.Graph.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connectedto_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Data_Graph_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 connectedto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_connectedto(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_connectedto(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_Graph_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.Data.Graph.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 connectedto = 2;
  for (int i = 0, n = this->_internal_connectedto_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_connectedto(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.Data.Graph.Node)
  return target;
}

size_t Data_Graph_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.Data.Graph.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 connectedto = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->connectedto_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_connectedto_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_Graph_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.Data.Graph.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_Graph_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_Graph_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.Data.Graph.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.Data.Graph.Node)
    MergeFrom(*source);
  }
}

void Data_Graph_Node::MergeFrom(const Data_Graph_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.Data.Graph.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connectedto_.MergeFrom(from.connectedto_);
}

void Data_Graph_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.Data.Graph.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Graph_Node::CopyFrom(const Data_Graph_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.Data.Graph.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Graph_Node::IsInitialized() const {
  return true;
}

void Data_Graph_Node::InternalSwap(Data_Graph_Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connectedto_.InternalSwap(&other->connectedto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_Graph_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data_Graph::InitAsDefaultInstance() {
}
class Data_Graph::_Internal {
 public:
  using HasBits = decltype(std::declval<Data_Graph>()._has_bits_);
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_learned_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_learned_leftest_node(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_barycenter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_greedy_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_greedy_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_median(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sifting(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_split(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Data_Graph::Data_Graph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.Data.Graph)
}
Data_Graph::Data_Graph(const Data_Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&right_, &from.right_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_) -
    reinterpret_cast<char*>(&right_)) + sizeof(split_));
  // @@protoc_insertion_point(copy_constructor:example.Data.Graph)
}

void Data_Graph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_Graph_example_2eproto.base);
  ::memset(&right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_) -
      reinterpret_cast<char*>(&right_)) + sizeof(split_));
}

Data_Graph::~Data_Graph() {
  // @@protoc_insertion_point(destructor:example.Data.Graph)
  SharedDtor();
}

void Data_Graph::SharedDtor() {
}

void Data_Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data_Graph& Data_Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_Graph_example_2eproto.base);
  return *internal_default_instance();
}


void Data_Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:example.Data.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&median_) -
        reinterpret_cast<char*>(&right_)) + sizeof(median_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&sifting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&split_) -
        reinterpret_cast<char*>(&sifting_)) + sizeof(split_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Data_Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .example.Data.Graph.Node nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 opt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_opt(&has_bits);
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 learned_switch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_learned_switch(&has_bits);
          learned_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 learned_leftest_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_learned_leftest_node(&has_bits);
          learned_leftest_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 barycenter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_barycenter(&has_bits);
          barycenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 greedy_insert = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_greedy_insert(&has_bits);
          greedy_insert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 greedy_switch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_greedy_switch(&has_bits);
          greedy_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 median = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_median(&has_bits);
          median_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sifting = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_sifting(&has_bits);
          sifting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 split = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_split(&has_bits);
          split_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.Data.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_right(), target);
  }

  // repeated .example.Data.Graph.Node nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nodes(i), target, stream);
  }

  // required int32 opt = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_opt(), target);
  }

  // required int32 learned_switch = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_learned_switch(), target);
  }

  // required int32 learned_leftest_node = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_learned_leftest_node(), target);
  }

  // required int32 barycenter = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_barycenter(), target);
  }

  // required int32 greedy_insert = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_greedy_insert(), target);
  }

  // required int32 greedy_switch = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_greedy_switch(), target);
  }

  // required int32 median = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_median(), target);
  }

  // required int32 sifting = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_sifting(), target);
  }

  // required int32 split = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_split(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.Data.Graph)
  return target;
}

size_t Data_Graph::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:example.Data.Graph)
  size_t total_size = 0;

  if (_internal_has_right()) {
    // required int32 right = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right());
  }

  if (_internal_has_opt()) {
    // required int32 opt = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt());
  }

  if (_internal_has_learned_switch()) {
    // required int32 learned_switch = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_learned_switch());
  }

  if (_internal_has_learned_leftest_node()) {
    // required int32 learned_leftest_node = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_learned_leftest_node());
  }

  if (_internal_has_barycenter()) {
    // required int32 barycenter = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_barycenter());
  }

  if (_internal_has_greedy_insert()) {
    // required int32 greedy_insert = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_greedy_insert());
  }

  if (_internal_has_greedy_switch()) {
    // required int32 greedy_switch = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_greedy_switch());
  }

  if (_internal_has_median()) {
    // required int32 median = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_median());
  }

  if (_internal_has_sifting()) {
    // required int32 sifting = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sifting());
  }

  if (_internal_has_split()) {
    // required int32 split = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split());
  }

  return total_size;
}
size_t Data_Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.Data.Graph)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required int32 right = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right());

    // required int32 opt = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt());

    // required int32 learned_switch = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_learned_switch());

    // required int32 learned_leftest_node = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_learned_leftest_node());

    // required int32 barycenter = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_barycenter());

    // required int32 greedy_insert = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_greedy_insert());

    // required int32 greedy_switch = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_greedy_switch());

    // required int32 median = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_median());

    // required int32 sifting = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sifting());

    // required int32 split = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .example.Data.Graph.Node nodes = 3;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.Data.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.Data.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.Data.Graph)
    MergeFrom(*source);
  }
}

void Data_Graph::MergeFrom(const Data_Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.Data.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000002u) {
      opt_ = from.opt_;
    }
    if (cached_has_bits & 0x00000004u) {
      learned_switch_ = from.learned_switch_;
    }
    if (cached_has_bits & 0x00000008u) {
      learned_leftest_node_ = from.learned_leftest_node_;
    }
    if (cached_has_bits & 0x00000010u) {
      barycenter_ = from.barycenter_;
    }
    if (cached_has_bits & 0x00000020u) {
      greedy_insert_ = from.greedy_insert_;
    }
    if (cached_has_bits & 0x00000040u) {
      greedy_switch_ = from.greedy_switch_;
    }
    if (cached_has_bits & 0x00000080u) {
      median_ = from.median_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      sifting_ = from.sifting_;
    }
    if (cached_has_bits & 0x00000200u) {
      split_ = from.split_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Data_Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.Data.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Graph::CopyFrom(const Data_Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.Data.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Graph::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void Data_Graph::InternalSwap(Data_Graph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  swap(right_, other->right_);
  swap(opt_, other->opt_);
  swap(learned_switch_, other->learned_switch_);
  swap(learned_leftest_node_, other->learned_leftest_node_);
  swap(barycenter_, other->barycenter_);
  swap(greedy_insert_, other->greedy_insert_);
  swap(greedy_switch_, other->greedy_switch_);
  swap(median_, other->median_);
  swap(sifting_, other->sifting_);
  swap(split_, other->split_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data::InitAsDefaultInstance() {
}
class Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Data>()._has_bits_);
};

Data::Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      graphs_(from.graphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:example.Data)
}

void Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_example_2eproto.base);
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:example.Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data& Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_example_2eproto.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:example.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graphs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .example.Data.Graph graphs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .example.Data.Graph graphs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .example.Data.Graph graphs = 5;
  total_size += 1UL * this->_internal_graphs_size();
  for (const auto& msg : this->graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graphs_.MergeFrom(from.graphs_);
}

void Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(graphs_)) return false;
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  graphs_.InternalSwap(&other->graphs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::example::Data_Graph_Node* Arena::CreateMaybeMessage< ::example::Data_Graph_Node >(Arena* arena) {
  return Arena::CreateInternal< ::example::Data_Graph_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::example::Data_Graph* Arena::CreateMaybeMessage< ::example::Data_Graph >(Arena* arena) {
  return Arena::CreateInternal< ::example::Data_Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::example::Data* Arena::CreateMaybeMessage< ::example::Data >(Arena* arena) {
  return Arena::CreateInternal< ::example::Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
